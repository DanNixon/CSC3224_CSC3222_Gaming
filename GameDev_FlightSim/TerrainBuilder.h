/**
 * @file
 * @author Dan Nixon (120263697)
 *
 * For CSC3224 Project 2.
 */

#ifndef _GAMEDEV_FLIGHTSIM_TERRAINBUILDER_H_
#define _GAMEDEV_FLIGHTSIM_TERRAINBUILDER_H_

#include <Engine_IO/INIKeyValueStore.h>
#include <Engine_ResourceManagment/IMemoryManaged.h>

#include "Terrain.h"
#include "TerrainPeak.h"

namespace GameDev
{
namespace FlightSim
{
  /**
   * @class TerrainBuilder
   * @brief Class containing functionality for building a terrain.
   * @author Dan Nixon
   */
  class TerrainBuilder : public Engine::ResourceManagment::IMemoryManaged, public Engine::IO::INIKeyValueStore
  {
  public:
    TerrainBuilder(const std::string &name, const std::string &resourceRoot);
    virtual ~TerrainBuilder();

    std::string metadataFilename() const;
    void loadMetadata();

    /**
     * @brief Gets the name of the terrain profile.
     * @return Profile name
     */
    inline std::string name() const
    {
      return m_name;
    }

    /**
     * @brief Gets the display name of the terrain profile.
     * @return Profile display name
     */
    inline std::string displayName() const
    {
      return m_displayName;
    }

    /**
     * @brief Gets the width of the terrain geerated by this profile.
     * @return Width (m)
     */
    inline float width() const
    {
      return m_width;
    }

    /**
     * @brief Gets the depth of the terrain generated by this profile.
     * @return Depth (m)
     */
    inline float depth() const
    {
      return m_depth;
    }

    void generate(Terrain *terrain);

  private:
    std::string m_resourceRoot; //!< Path to the root of the resources directory

    std::string m_name;        //!< Name of the profile
    std::string m_displayName; //!< Display name of the profile

    float m_width; //!< Width of generated terrain
    float m_depth; //!< Height of generated terrain

    size_t m_resolutionX; //!< Resolution of terrain in X axis
    size_t m_resolutionY; //!< Resolution of terrain in Y axis

    float m_baselineAltitude; //!< initial altitude of (flat) terrain

    std::vector<TerrainPeak> m_peaks; //!< List of peaks on this terrain
  };
}
}

#endif
